(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{193:function(s,a,e){"use strict";e.r(a);var t=e(0),n=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"springboot静态文件处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot静态文件处理","aria-hidden":"true"}},[s._v("#")]),s._v(" springboot静态文件处理")]),s._v(" "),e("p",[s._v("如果没有使用mvc，把index.html放到static即可访问。")]),s._v(" "),e("p",[s._v("如果使用了 "),e("code",[s._v("@EnableWebMvc")]),s._v("  或者 配置了下面类（这里估计自动@EnableWebMvc了）")]),s._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{attrs:{class:"token annotation punctuation"}},[s._v("@Configuration")]),s._v("\n"),e("span",{attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),e("span",{attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),e("span",{attrs:{class:"token class-name"}},[s._v("SpringMVCConfig")]),s._v(" "),e("span",{attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),e("span",{attrs:{class:"token class-name"}},[s._v("WebMvcConfigurerAdapter")]),s._v(" \n")])])]),e("p",[s._v("静态资源定位于 "),e("code",[s._v("src/main/webapp")]),s._v("，需要把文件放在这里。")]),s._v(" "),e("p",[s._v("其实官方解释没有提及一点，就是不能使用@EnableWebMvc，当然如果Spring Boot在classpath里看到有 spring webmvc 也会自动添加@EnableWebMvc (http://spring.io/guides/gs/rest-service/)")]),s._v(" "),e("p",[s._v("如果@EnableWebMvc了，那么就会自动覆盖了官方给出的/static, /public, META-INF/resources, /resources等存放静态资源的目录。而将静态资源定位于src/main/webapp。当需要重新定义好资源所在目录时，则需要主动添加上述的那个配置类，来Override addResourceHandlers方法。")])])}],!1,null,null,null);n.options.__file="spring-boot-static.md";a.default=n.exports}}]);