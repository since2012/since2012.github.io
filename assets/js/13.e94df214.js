(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{116:function(t,s,a){"use strict";a.r(s);var n=a(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"spring-boot-日期数据格式转换-jsonformat实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-日期数据格式转换-jsonformat实例","aria-hidden":"true"}},[t._v("#")]),t._v(" Spring Boot 日期数据格式转换@JsonFormat实例")]),a("p",[t._v("需要保证是是默认的转换器，就是jackson的转换器")]),a("p",[t._v("com.fasterxml.jackson.annotation.JsonFormat")]),a("p",[t._v("一开始配置了下面转换器，@JsonFormat就不可用。")]),a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),a("br"),a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@EnableAspectJAutoProxy")]),a("br"),a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@EnableWebMvc")]),a("br"),a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@ComponentScan")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("basePackages "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"rugal.sample.controller"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"cn.xiaowenjie"')]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("br"),a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("SpringMVCApplicationContext")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("WebMvcConfigurerAdapter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("br"),a("br"),a("span",{attrs:{class:"token comment"}},[t._v("//\t@Override")]),a("br"),a("span",{attrs:{class:"token comment"}},[t._v("//\tpublic void configureMessageConverters(List<HttpMessageConverter<?>> converters) {")]),a("br"),a("span",{attrs:{class:"token comment"}},[t._v("//\t\tGsonHttpMessageConverter messageConverter = new GsonHttpMessageConverter();")]),a("br"),a("span",{attrs:{class:"token comment"}},[t._v("//\t\tList<MediaType> supportedMediaTypes = new ArrayList<>();")]),a("br"),a("span",{attrs:{class:"token comment"}},[t._v("//\t\tsupportedMediaTypes.add(MediaType.APPLICATION_JSON);")]),a("br"),a("span",{attrs:{class:"token comment"}},[t._v("//\t\tmessageConverter.setSupportedMediaTypes(supportedMediaTypes);")]),a("br"),a("span",{attrs:{class:"token comment"}},[t._v("//\t\tconverters.add(messageConverter);")]),a("br"),a("span",{attrs:{class:"token comment"}},[t._v("//\t}")]),a("br"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("br"),a("br")])]),a("h2",{attrs:{id:"spring-boot-日期数据格式转换-jsonformat实例-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-日期数据格式转换-jsonformat实例-2","aria-hidden":"true"}},[t._v("#")]),t._v(" Spring Boot 日期数据格式转换@JsonFormat实例")]),a("p",[t._v("pojo的bean里面通常会有Date类型的数据，直接通过@ResponseBody返回出去的是一个长整型时间戳（从1970到该变量时间的毫秒数），关于原因，网上很多，此处不细讲。如果想要返回自定义的日期格式，如：yyyymmddhhmmss，需做相关处理，网上有很多处理方式，大体都是继承、重写，比较复杂。实际上JSON已有注解@JsonFormat支持，使用实例：")]),a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@JsonFormat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timezone "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"GMT+8"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pattern "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"yyyyMMddHHmmss"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("br"),a("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" Date createTime"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),a("br")])]),a("p",[t._v("作用：")]),a("p",[t._v("1）入参时，请求报文只需要传入yyyymmddhhmmss字符串进来，则自动转换为Date类型数据。\n2）出参时，Date类型的数据自动转换为14位的字符串返回出去。")]),a("p",[t._v("详细可参阅：")]),a("p",[t._v("http://fasterxml.github.io/jackson-annotations/javadoc/2.0.0/com/fasterxml/jackson/annotation/JsonFormat.html")]),a("h2",{attrs:{id:"相关的其他注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关的其他注解","aria-hidden":"true"}},[t._v("#")]),t._v(" 相关的其他注解")]),a("ul",[a("li",[t._v("@JsonIgnoreProperties")])]),a("p",[t._v("此注解是类注解，作用是json序列化时将Java bean中的一些属性忽略掉，序列化和反序列化都受影响。")]),a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@JsonIgnoreProperties")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"word"')]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("br")])]),a("ul",[a("li",[t._v("@JsonIgnore")])]),a("p",[t._v("此注解用于属性或者方法上（最好是属性上），作用和上面的@JsonIgnoreProperties一样。")]),a("ul",[a("li",[t._v("@JsonSerialize\n此注解用于属性或者getter方法上，用于在序列化时嵌入我们自定义的代码，比如序列化一个double时在其后面限制两位小数点。 "),a("code",[t._v("@JsonSerialize(using = CustomDoubleSerialize.class)")])])]),a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),a("br"),a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("CustomDateSerialize")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("JsonSerializer")]),a("span",{attrs:{class:"token generics function"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Date"),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("br"),a("br"),t._v("\t"),a("span",{attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("final")]),t._v(" SimpleDateFormat dateFormat "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("SimpleDateFormat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"MM-dd hh:mm"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),a("br"),a("br"),t._v("\t"),a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),a("br"),t._v("\t"),a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("serialize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Date date"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" JsonGenerator gen"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SerializerProvider provider"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("br"),t._v("\t\t\t"),a("span",{attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" IOException"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" JsonProcessingException "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("br"),t._v("\t\tString formattedDate "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" dateFormat"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("format")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),a("br"),t._v("\t\tgen"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("writeString")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("formattedDate"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),a("br"),t._v("\t"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("br"),a("br"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("br"),t._v("``"),a("br"),a("br"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@JsonDeserialize")]),a("br"),t._v(" 此注解用于属性或者setter方法上，用于在反序列化时可以嵌入我们自定义的代码，类似于上面的"),a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@JsonSerialize")]),t._v("  "),a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@JsonDeserialize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("using "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" CustomDateDeserialize"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ")])])])}],!1,null,null,null);s.default=o.exports}}]);