(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{115:function(t,a,n){"use strict";n.r(a);var s=n(0),e=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"正确实现用spring扫描自定义的annotation，-beanpostprocessor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正确实现用spring扫描自定义的annotation，-beanpostprocessor","aria-hidden":"true"}},[t._v("#")]),t._v(" 正确实现用spring扫描自定义的annotation， BeanPostProcessor")]),n("p",[t._v("http://www.importnew.com/22934.html")]),n("p",[t._v("在使用spring时，有时候有会有一些 "),n("code",[t._v("自定义annotation")]),t._v(" 的需求，比如一些Listener的回调函数。")]),n("p",[t._v("比如：")]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),n("br"),n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("MyService")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("br"),t._v("    "),n("span",{attrs:{class:"token annotation punctuation"}},[t._v("@MyListener")]),n("br"),t._v("    "),n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("onMessage")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Message msg"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("br"),t._v("    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("br"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("br")])]),n("p",[t._v("一开始的时候，我是在Spring的 "),n("code",[t._v("ContextRefreshedEvent")]),t._v(" 事件里，通过 "),n("code",[t._v("context.getBeansWithAnnotation(Component.class)")]),t._v(" 来获取到所有的bean，然后再检查method是否有 "),n("code",[t._v("@MyListener")]),t._v(" 的 "),n("code",[t._v("annotation")]),t._v("。")]),n("p",[t._v("后来发现这个方法有缺陷，当有一些spring bean的 "),n("code",[t._v("@Scope")]),t._v(" 设置为 "),n("code",[t._v("session/request")]),t._v(" 时，创建bean会失败。")]),n("p",[t._v("参考：\nhttp://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#beans-factory-scopes")]),n("p",[t._v("在网上搜索了一些资料，发现不少人都是用 "),n("code",[t._v("context.getBeansWithAnnotation(Component.class)")]),t._v(" ，这样子来做的，但是这个方法并不对。")]),n("h2",{attrs:{id:"beanpostprocessor接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#beanpostprocessor接口","aria-hidden":"true"}},[t._v("#")]),t._v(" BeanPostProcessor接口")]),n("p",[t._v("后来看了下spring jms里的@JmsListener的实现，发现实现BeanPostProcessor接口才是最合理的办法。")]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("BeanPostProcessor")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("br"),t._v(" "),n("br"),t._v("    "),n("span",{attrs:{class:"token comment"}},[t._v("/**"),n("br"),t._v("     * Apply this BeanPostProcessor to the given new bean instance <i>before</i> any bean"),n("br"),t._v("     * initialization callbacks (like InitializingBean's {@code afterPropertiesSet}"),n("br"),t._v("     * or a custom init-method). The bean will already be populated with property values."),n("br"),t._v("     * The returned bean instance may be a wrapper around the original."),n("br"),t._v("     * @param bean the new bean instance"),n("br"),t._v("     * @param beanName the name of the bean"),n("br"),t._v("     * @return the bean instance to use, either the original or a wrapped one;"),n("br"),t._v("     * if {@code null}, no subsequent BeanPostProcessors will be invoked"),n("br"),t._v("     * @throws org.springframework.beans.BeansException in case of errors"),n("br"),t._v("     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet"),n("br"),t._v("     */")]),n("br"),t._v("    Object "),n("span",{attrs:{class:"token function"}},[t._v("postProcessBeforeInitialization")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object bean"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String beanName"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" BeansException"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),n("br"),t._v(" "),n("br"),t._v("    "),n("span",{attrs:{class:"token comment"}},[t._v("/**"),n("br"),t._v("     * Apply this BeanPostProcessor to the given new bean instance <i>after</i> any bean"),n("br"),t._v("     * initialization callbacks (like InitializingBean's {@code afterPropertiesSet}"),n("br"),t._v("     * or a custom init-method). The bean will already be populated with property values."),n("br"),t._v("     * The returned bean instance may be a wrapper around the original."),n("br"),t._v("     * <p>In case of a FactoryBean, this callback will be invoked for both the FactoryBean"),n("br"),t._v("     * instance and the objects created by the FactoryBean (as of Spring 2.0). The"),n("br"),t._v("     * post-processor can decide whether to apply to either the FactoryBean or created"),n("br"),t._v("     * objects or both through corresponding {@code bean instanceof FactoryBean} checks."),n("br"),t._v("     * <p>This callback will also be invoked after a short-circuiting triggered by a"),n("br"),t._v("     * {@link InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation} method,"),n("br"),t._v("     * in contrast to all other BeanPostProcessor callbacks."),n("br"),t._v("     * @param bean the new bean instance"),n("br"),t._v("     * @param beanName the name of the bean"),n("br"),t._v("     * @return the bean instance to use, either the original or a wrapped one;"),n("br"),t._v("     * if {@code null}, no subsequent BeanPostProcessors will be invoked"),n("br"),t._v("     * @throws org.springframework.beans.BeansException in case of errors"),n("br"),t._v("     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet"),n("br"),t._v("     * @see org.springframework.beans.factory.FactoryBean"),n("br"),t._v("     */")]),n("br"),t._v("    Object "),n("span",{attrs:{class:"token function"}},[t._v("postProcessAfterInitialization")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object bean"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String beanName"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" BeansException"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),n("br"),t._v(" "),n("br"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("br")])]),n("p",[t._v("所有的bean在创建完之后，都会回调 "),n("code",[t._v("postProcessAfterInitialization")]),t._v(" 函数，这时就可以确定bean是已经创建好的了。")]),n("p",[t._v("所以"),n("strong",[t._v("扫描自定义的annotation")]),t._v("的代码大概是这个样子的：")]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("MyListenerProcessor")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("BeanPostProcessor")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("br"),t._v("    "),n("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),n("br"),t._v("    "),n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Object "),n("span",{attrs:{class:"token function"}},[t._v("postProcessBeforeInitialization")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object bean"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String beanName"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" BeansException "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("br"),t._v("        "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bean"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),n("br"),t._v("    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("br"),t._v(" "),n("br"),t._v("    "),n("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),n("br"),t._v("    "),n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Object "),n("span",{attrs:{class:"token function"}},[t._v("postProcessAfterInitialization")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object bean"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String beanName"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" BeansException "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("br"),t._v("        Method"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" methods "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ReflectionUtils"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("getAllDeclaredMethods")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bean"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("getClass")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),n("br"),t._v("        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("methods "),n("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("br"),t._v("            "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Method method "),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" methods"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("br"),t._v("                MyListener myListener "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" AnnotationUtils"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("findAnnotation")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MyListener"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token keyword"}},[t._v("class")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),n("br"),t._v("                "),n("span",{attrs:{class:"token comment"}},[t._v("// process")]),n("br"),t._v("            "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("br"),t._v("        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("br"),t._v("        "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bean"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),n("br"),t._v("    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("br"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("br")])]),n("h2",{attrs:{id:"smartinitializingsingleton-接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#smartinitializingsingleton-接口","aria-hidden":"true"}},[t._v("#")]),t._v(" SmartInitializingSingleton 接口")]),n("p",[t._v("看spring jms的代码时，发现SmartInitializingSingleton 这个接口也比较有意思。")]),n("p",[t._v("就是当所有的singleton的bean都初始化完了之后才会回调这个接口。不过要注意是 "),n("strong",[t._v("4.1 之后")]),t._v("才出现的接口。")]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("SmartInitializingSingleton")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("br"),t._v(" "),n("br"),t._v("    "),n("span",{attrs:{class:"token comment"}},[t._v("/**"),n("br"),t._v("     * Invoked right at the end of the singleton pre-instantiation phase,"),n("br"),t._v("     * with a guarantee that all regular singleton beans have been created"),n("br"),t._v("     * already. {@link ListableBeanFactory#getBeansOfType} calls within"),n("br"),t._v("     * this method won't trigger accidental side effects during bootstrap."),n("br"),t._v("     * <p><b>NOTE:</b> This callback won't be triggered for singleton beans"),n("br"),t._v("     * lazily initialized on demand after {@link BeanFactory} bootstrap,"),n("br"),t._v("     * and not for any other bean scope either. Carefully use it for beans"),n("br"),t._v("     * with the intended bootstrap semantics only."),n("br"),t._v("     */")]),n("br"),t._v("    "),n("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("afterSingletonsInstantiated")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("br"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("br")])]),n("p",[t._v("https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/SmartInitializingSingleton.html")])])}],!1,null,null,null);a.default=e.exports}}]);