(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{111:function(t,n,a){"use strict";a.r(n);var s=a(0),e=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"正确实现用spring扫描自定义的annotation，-beanpostprocessor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正确实现用spring扫描自定义的annotation，-beanpostprocessor","aria-hidden":"true"}},[t._v("#")]),t._v(" 正确实现用spring扫描自定义的annotation， BeanPostProcessor")]),a("p",[t._v("http://www.importnew.com/22934.html")]),a("p",[t._v("在使用spring时，有时候有会有一些 "),a("code",[t._v("自定义annotation")]),t._v(" 的需求，比如一些Listener的回调函数。")]),a("p",[t._v("比如：")]),a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("MyService")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@MyListener")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("onMessage")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Message msg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("一开始的时候，我是在Spring的 "),a("code",[t._v("ContextRefreshedEvent")]),t._v(" 事件里，通过 "),a("code",[t._v("context.getBeansWithAnnotation(Component.class)")]),t._v(" 来获取到所有的bean，然后再检查method是否有 "),a("code",[t._v("@MyListener")]),t._v(" 的 "),a("code",[t._v("annotation")]),t._v("。")]),a("p",[t._v("后来发现这个方法有缺陷，当有一些spring bean的 "),a("code",[t._v("@Scope")]),t._v(" 设置为 "),a("code",[t._v("session/request")]),t._v(" 时，创建bean会失败。")]),a("p",[t._v("参考：\nhttp://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#beans-factory-scopes")]),a("p",[t._v("在网上搜索了一些资料，发现不少人都是用 "),a("code",[t._v("context.getBeansWithAnnotation(Component.class)")]),t._v(" ，这样子来做的，但是这个方法并不对。")]),a("h2",{attrs:{id:"beanpostprocessor接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beanpostprocessor接口","aria-hidden":"true"}},[t._v("#")]),t._v(" BeanPostProcessor接口")]),a("p",[t._v("后来看了下spring jms里的@JmsListener的实现，发现实现BeanPostProcessor接口才是最合理的办法。")]),a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("BeanPostProcessor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \n    "),a("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Apply this BeanPostProcessor to the given new bean instance <i>before</i> any bean\n     * initialization callbacks (like InitializingBean's {@code afterPropertiesSet}\n     * or a custom init-method). The bean will already be populated with property values.\n     * The returned bean instance may be a wrapper around the original.\n     * @param bean the new bean instance\n     * @param beanName the name of the bean\n     * @return the bean instance to use, either the original or a wrapped one;\n     * if {@code null}, no subsequent BeanPostProcessors will be invoked\n     * @throws org.springframework.beans.BeansException in case of errors\n     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet\n     */")]),t._v("\n    Object "),a("span",{attrs:{class:"token function"}},[t._v("postProcessBeforeInitialization")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object bean"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String beanName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" BeansException"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    "),a("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Apply this BeanPostProcessor to the given new bean instance <i>after</i> any bean\n     * initialization callbacks (like InitializingBean's {@code afterPropertiesSet}\n     * or a custom init-method). The bean will already be populated with property values.\n     * The returned bean instance may be a wrapper around the original.\n     * <p>In case of a FactoryBean, this callback will be invoked for both the FactoryBean\n     * instance and the objects created by the FactoryBean (as of Spring 2.0). The\n     * post-processor can decide whether to apply to either the FactoryBean or created\n     * objects or both through corresponding {@code bean instanceof FactoryBean} checks.\n     * <p>This callback will also be invoked after a short-circuiting triggered by a\n     * {@link InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation} method,\n     * in contrast to all other BeanPostProcessor callbacks.\n     * @param bean the new bean instance\n     * @param beanName the name of the bean\n     * @return the bean instance to use, either the original or a wrapped one;\n     * if {@code null}, no subsequent BeanPostProcessors will be invoked\n     * @throws org.springframework.beans.BeansException in case of errors\n     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet\n     * @see org.springframework.beans.factory.FactoryBean\n     */")]),t._v("\n    Object "),a("span",{attrs:{class:"token function"}},[t._v("postProcessAfterInitialization")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object bean"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String beanName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" BeansException"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("所有的bean在创建完之后，都会回调 "),a("code",[t._v("postProcessAfterInitialization")]),t._v(" 函数，这时就可以确定bean是已经创建好的了。")]),a("p",[t._v("所以"),a("strong",[t._v("扫描自定义的annotation")]),t._v("的代码大概是这个样子的：")]),a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("MyListenerProcessor")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("BeanPostProcessor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Object "),a("span",{attrs:{class:"token function"}},[t._v("postProcessBeforeInitialization")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object bean"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String beanName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" BeansException "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bean"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n    "),a("span",{attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Object "),a("span",{attrs:{class:"token function"}},[t._v("postProcessAfterInitialization")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object bean"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String beanName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" BeansException "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Method"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" methods "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ReflectionUtils"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("getAllDeclaredMethods")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bean"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("getClass")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("methods "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Method method "),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" methods"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                MyListener myListener "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" AnnotationUtils"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("findAnnotation")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MyListener"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("// process")]),t._v("\n            "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bean"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("h2",{attrs:{id:"smartinitializingsingleton-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#smartinitializingsingleton-接口","aria-hidden":"true"}},[t._v("#")]),t._v(" SmartInitializingSingleton 接口")]),a("p",[t._v("看spring jms的代码时，发现SmartInitializingSingleton 这个接口也比较有意思。")]),a("p",[t._v("就是当所有的singleton的bean都初始化完了之后才会回调这个接口。不过要注意是 "),a("strong",[t._v("4.1 之后")]),t._v("才出现的接口。")]),a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("SmartInitializingSingleton")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \n    "),a("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Invoked right at the end of the singleton pre-instantiation phase,\n     * with a guarantee that all regular singleton beans have been created\n     * already. {@link ListableBeanFactory#getBeansOfType} calls within\n     * this method won't trigger accidental side effects during bootstrap.\n     * <p><b>NOTE:</b> This callback won't be triggered for singleton beans\n     * lazily initialized on demand after {@link BeanFactory} bootstrap,\n     * and not for any other bean scope either. Carefully use it for beans\n     * with the intended bootstrap semantics only.\n     */")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("afterSingletonsInstantiated")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/SmartInitializingSingleton.html")])])}],!1,null,null,null);n.default=e.exports}}]);