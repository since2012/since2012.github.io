(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{80:function(e,t,r){"use strict";r.r(t);var i=r(0),a=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"同步的轮询"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#同步的轮询","aria-hidden":"true"}},[e._v("#")]),e._v(" 同步的轮询")]),r("ul",[r("li",[e._v("重复调用read")]),r("li",[e._v("通过文件描述符上的事件状态来 select\n采用1024长度数组来存储状态，最多同时检查1024个文件描述符")]),r("li",[e._v("poll，链表")]),r("li",[e._v("epoll，没有事件会休眠，直到事件唤醒。不是遍历查询，不会浪费cpu")]),r("li",[e._v("kqueue，类似epoll，只有freebsd系统")])]),r("h1",{attrs:{id:"异步"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异步","aria-hidden":"true"}},[e._v("#")]),e._v(" 异步")]),r("p",[e._v("libeio： 采用线程池与阻塞IO来模拟异步IO。\nwindow下的iocp，内部依然是线程池原理，但线程池由系统内核接手管理。")]),r("h1",{attrs:{id:"单线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单线程","aria-hidden":"true"}},[e._v("#")]),e._v(" 单线程")]),r("p",[e._v("仅仅js执行在单线程里面，在node中，内部完成io任务另有线程池。\n除了用户代码无法并行执行外，所有的io则是可以并行起来的。")]),r("h1",{attrs:{id:"事件循环"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#事件循环","aria-hidden":"true"}},[e._v("#")]),e._v(" 事件循环")]),r("p",[e._v("是一个典型的生产者消费者模型，异步io，网络请求是生产者，源源不断为node提供不同类型的事件，这些事件被传递到对于的观察者，事件循环则从观察者哪里取出事件并处理。windows下，这个循环由于icop创建，*nix下基于多线程创建。")]),r("p",[e._v("观察者有：文件io观察者，网络io观察者，定时器观察者等等，将事件进行了分类。")]),r("p",[e._v("事件循环，观察者，请求对象，io线程池这4者共同构成了node异步io模型的基本要素。")]),r("h1",{attrs:{id:"settimeout，setinterval"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#settimeout，setinterval","aria-hidden":"true"}},[e._v("#")]),e._v(" setTimeout，setInterval")]),r("p",[e._v("原理与异步io类似，只是不需要io线程池的参与。调用后的定时器会被插入到定时器观察者内部的一个红黑树中，每次tick执行时，会从该红黑树中迭代取出定时器对象，检查是否超时，如果超过，就形成一个事件，他的回调函数会立即执行。")]),r("p",[e._v("精度不够，而且采用定时器需要动用红黑树，创建定时器对象和迭代操作。复杂度为O(lg(n))。")]),r("h1",{attrs:{id:"process-nexttick-setimmediate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#process-nexttick-setimmediate","aria-hidden":"true"}},[e._v("#")]),e._v(" process.nextTick / setImmediate")]),r("p",[e._v("process.nextTick() 只需要回调放入队列，下一轮tick取出执行。复杂度为O(1)。")]),r("p",[e._v("setImmediate，v0.9.1之后实现，ie有。chrome没有。")]),r("p",[e._v("procee.nextTick属于idel观察者，setImmediate属于check观察者，每一轮事件循环检查中，idle观察者先于io观察者，io观察者限于check观察者。")]),r("p",[e._v("process.nextTick的回调保存在数组里面，setImmediate保存在链表里面。每次循环，nextTick里面的数组的回调函数会全部执行，而setImmediate里面的每轮执行执行一个。")]),r("p",[e._v("类似的，NGINX也采用了异步、事件驱动的方法来处理连接。这种处理方式无需（像使用传统架构的服务器一样）为每个请求创建额外的专用进程或者线程，而是在一个工作进程中处理多个连接和请求。为此，NGINX工作在非阻塞的socket模式下，并使用了epoll 和 kqueue这样有效的方法。"),r("a",{attrs:{href:"http://www.infoq.com/cn/articles/thread-pools-boost-performance-9x",target:"_blank",rel:"noopener noreferrer"}},[e._v("相关链接")])]),r("h1",{attrs:{id:"异步编程主要解决方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异步编程主要解决方案","aria-hidden":"true"}},[e._v("#")]),e._v(" 异步编程主要解决方案")]),r("ul",[r("li",[r("p",[e._v("事件发布/订阅模式")]),r("ul",[r("li",[e._v("emmitor.on / emit")]),r("li",[e._v("EventProxy原理（来自Backbone事件模块）")]),r("li",[r("a",{attrs:{href:"https://github.com/alsotang/node-lessons",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考链接")])])])]),r("li",[r("p",[e._v("Promise/Deferred模式")]),r("ul",[r("li",[e._v("先执行异步操作，延迟传递处理的方式。（相对于传统的方式必须先设置回调函数，在执行异步操作）")]),r("li",[e._v("解决回调嵌套")]),r("li",[e._v("最早出现在Dojo里面，jq1.5引入。")])])]),r("li",[r("p",[e._v("流程控制库")]),r("ul",[r("li",[e._v("尾触发和next")]),r("li",[e._v("async 模块")]),r("li",[e._v("step 模块，更加轻量级")])])])]),r("h1",{attrs:{id:"promise-deferred模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#promise-deferred模式","aria-hidden":"true"}},[e._v("#")]),e._v(" Promise/Deferred模式")]),r("ul",[r("li",[e._v("3种状态：未完成，完成，失败。")]),r("li",[e._v("Promise对象只需要具备then方法即可。then(fulfilledHandler, errorHandler, progressHandler)")]),r("li",[e._v("then只接受function，其他忽略。继续返回Promise对象，实现链式调用。")]),r("li",[e._v("Deferred主要用于内部，用于维护异步模型的状态；Promise则作用于外部，通过then方法暴露。")]),r("li",[e._v("Q模块是Promise/A规范的一个实现，npm install q。"),r("a",{attrs:{href:"https://blog.csdn.net/ii1245712564/article/details/51419533",target:"_blank",rel:"noopener noreferrer"}},[e._v("链接")])])])])}],!1,null,null,null);t.default=a.exports}}]);